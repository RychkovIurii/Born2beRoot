Hostname: user42
Domain name is empty.
Root password: Your_PASSWD_for_root
Full name for the new user: user
Password for the new user: Your_PASSWD

Check password policy for root and user.( sudo chage -l root/user)


Encryption passphrase: Your_PASSWD_for_disk
HTTP proxy empty
Software to install - no
Install GRUB

Installing sudo & configuration of user and groups
su
apt install sudo
sudo reboot
sudo -V > file.txt


USER and GROUP
su
sudo adduser <login>
sudo addgroup user42
getent group <groupname>		or		cat /etc/group
sudo adduser <user> <groupname>
nano /etc/group

SSH
sudo apt update
sudo apt install openssh-server
sudo service ssh status
sudo apt install vim
vim /etc/ssh/sshd_config
➤ #Port 22 -> Port 4242
➤ #PermitRootLogin prohibit-password -> PermitRootLogin no
vim /etc/ssh/ssh_config
➤ #Port 22 -> Port 4242
sudo service ssh restart
sudo service ssh status

FIREWALL
sudo apt install ufw
sudo ufw enable
sudo ufw allow 4242
sudo ufw status	or	sudo ufw status verbose	or	sudo ufw status numbered
//Setting up the sudo policies
touch /etc/sudoers.d/sudo_config	//The file will serve the purpouse of storing our sudo policy
mkdir /var/log/sudo		//each commands need to be logged, the input and output
vim /etc/sudoers.d/sudo_config

Defaults  passwd_tries=3
Defaults  badpass_message=“BADPASS MESSAGE”
Defaults  logfile="/var/log/sudo/sudo_config"
Defaults  log_input, log_output
Defaults  iolog_dir="/var/log/sudo"
Defaults  requiretty
Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

Ps. Defaults  requiretty - sudo commands can only be run from a terminal (TTY)

vim /etc/login.defs
➤ PASS_MAX_DAYS 99999 -> PASS_MAX_DAYS 30
➤ PASS_MIN_DAYS 0 -> PASS_MIN_DAYS 2
sudo apt install libpam-pwquality
vim /etc/pam.d/common-password
minlen=10
ucredit=-1
dcredit=-1
lcredit=-1
maxrepeat=3
reject_username
difok=7
enforce_for_root

SET UP Port fowarding VMBOX Manager
ssh <user>@localhost -p 4242


SCRIPT
#!/bin/bash

# Architecture

arch=$(uname -a)

# CPU PHYSICAL Physical Cores

cpuf=$(grep "physical id" /proc/cpuinfo | wc -l)

# CPU VIRTUAL Virtual Cores

cpuv=$(grep "processor" /proc/cpuinfo | wc -l)

# RAM
ram_total=$(free --mega | awk '$1 == "Mem:" {print $2}')
ram_use=$(free --mega | awk '$1 == "Mem:" {print $3}')
ram_percent=$(free --mega | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}')

# DISK Disk memory  for "disk filesystem"

disk_total=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}')
disk_use=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} END {print disk_u}')
disk_percent=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} {disk_t+= $2} END {printf("%d"), disk_u/disk_t*100}')

# CPU LOAD CPU usage percentage

cpul=$(vmstat 1 2 | tail -1 | awk '{printf $15}')
cpu_op=$(expr 100 - $cpul)
cpu_fin=$(printf "%.1f" $cpu_op)

# LAST BOOT  Last reboot

lb=$(who -b | awk '$1 == "system" {print $3 " " $4}')

# LVM USE LVM active

lvmu=$(if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo yes; else echo no; fi)

# TCP CONNEXIONS 5-9 TCP connections

tcpc=$(ss -ta | grep ESTAB | wc -l)

# USER LOG Number of users

ulog=$(users | wc -w)

# NETWORK  IP adress & MAC

ip=$(hostname -I)
mac=$(ip link | grep "link/ether" | awk '{print $2}')

# SUDO Number of commands executed with sudo

cmnd=$(journalctl _COMM=sudo | grep COMMAND | wc -l)

wall "	Architecture: $arch
	CPU physical: $cpuf
	vCPU: $cpuv
	Memory Usage: $ram_use/${ram_total}MB ($ram_percent%)
	Disk Usage: $disk_use/${disk_total} ($disk_percent%)
	CPU load: $cpu_fin%
	Last boot: $lb
	LVM use: $lvmu
	Connections TCP: $tcpc ESTABLISHED
	User log: $ulog
	Network: IP $ip ($mac)
	Sudo: $cmnd cmd"


sudo crontab -u root -e. //Crontab

WORDPRESS
sudo ufw allow 80
Port forwarding
sudo apt install wget zip
cd /var/www/
Download Wordpress
Unpack
sudo mv html/ html_old/
sudo mv wordpress/ html
sudo chmod -R 755 html

MARIADB
sudo apt install mariadb-server
sudo mysql_secure_installation
Switch to unix_socket autentication? → N
Change the root password? → N
Remove anonymous users? → Y
Disallow root login remotely? → Y
Remove test database and acces to it? → Y
Reaload privilege tables now? → Y
CREATE DATABASE wp_database;
SHOW DATABASES;
CREATE USER ‘irychkov’@‘localhost' IDENTIFIED BY ‘mypassword’;
GRANT ALL PRIVILEGES ON wp_database.* TO ‘irychkov’@‘localhost';
FLUSH PRIVILEGES;

PHP
sudo apt install php-cgi php-mysql
cd /var/www/html
cp wp-config-sample.php  wp-config.php
nano wp-config.php
Use one credits
sudo lighty-enable-mod fastcgi
sudo lighty-enable-mod fastcgi-php
sudo service lighttpd force-reload
Browser - localhost
Install WordPress
localhost/wp-admin


LiteSpeed
sudo apt update
sudo apt upgrade
wget -O - https://repo.litespeed.sh | sudo bash
sudo apt update
sudo apt install openlitespeed
sudo /usr/local/lsws/admin/misc/admpass.sh
sudo ufw allow 8088/tcp
sudo ufw allow 7080/tcp
sudo ufw reload
Port forwarding rules.
localhost:7080
curl localhost:7080

lsblk -  list block devices


Site Title Irychkov WP
Username Your_Login
Password Your_PASSWD

LiteSpeed
Login: Your_Login
Password: Your_PASSWD

Tips eval:
diff <(echo “$(cat /Users/irychkov/Desktop/iurii/signature.txt)”) < (shamus born2beroot.vdi | cut -d’’ -f1)
ls /usr/bin/*session				//check no graphical interface 
sudo ufw status
sudo service ufw status
uname -v							//check operating system
getent group user42
sudo addgroup evaluating
sudo adduser name_user evaluating
sudo nano /etc/hostname			//modify hostname step1
sudo nano /etc/hosts				//modify hostname step2
hostname							//check hostname
lsblk							//show partitions
which sudo	or   dpkg -s sudo		//check that sudo is installed
sudo ufw status numbered			//check num of rule
sudo ufw delete num_rule 			//delete rule ufw
sudo /etc/init.d/cron stop 		//stop cron
sudo /etc/init.d/cron start		//start cron


// Check fd for PC
ulimit -a
-t: cpu time (seconds)              unlimited
-f: file size (blocks)              unlimited
-d: data seg size (kbytes)          unlimited
-s: stack size (kbytes)             8192
-c: core file size (blocks)         0
-v: address space (kbytes)          unlimited
-l: locked-in-memory size (kbytes)  unlimited
-u: processes                       709
-n: file descriptors                256